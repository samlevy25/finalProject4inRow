// Final project : 4 in row
// Campus : Ashdod
// Samuel Levy , Id : 345112148


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define EMPTY_CHAR ' ' //Boot the board using space
#define PLAYER_1_CHAR 'X'
#define PLAYER_2_CHAR 'O'

#define WIN_LENGTH 4

typedef struct
{
    char** board   ; // the board (Dynamically assigned)
    int rows;//the rows
    int cols; // the col
} Board;

void InitBoard(Board* pBoard);
void FreeBoard(Board* pBoard);
void PlayFourInARow(Board board);
void PrintRecursive(int R, int counter);
void PrintBoard(Board board);
bool HasAnotherTurn(Board board, int iterations);
bool PlayTurn(Board board, bool isPlayerOne);
bool PlayTurnInRow(Board board, int row, bool isPlayerOne);
bool IsValidRow(Board board, int row);
bool IsAWinnerCell(Board board, int col, int row, bool isPlayerOne);
bool IsWinnerVertically(Board board, int col, int row, char playerChar);
bool IsWinnerHorizontally(Board board, int col, int row, char playerChar);
bool IsWinnerDiagonallyRight(Board board, int col, int row, char playerChar);
bool IsWinnerDiagonallyLeft(Board board, int col, int row, char playerChar);


int main()
{
    Board board;
    
    InitBoard(&board); //build the board
    PlayFourInARow(board); // the game
    FreeBoard(&board); // free the dynamic allocation
    
    return 0;
}



void InitBoard(Board* pBoard) //Build the board according to the user's input
{
    int i, j;
    
    printf("Enter the size of the board\n");
    printf("Rows: ");
    scanf("%d", &(pBoard->cols));
    printf("Columns: ");
    scanf("%d", &(pBoard->rows));
    
    
    pBoard->board = (char**)malloc(pBoard->cols * sizeof(char*)); // Dynamic allocation for cols
    if (!pBoard->board)
    {
        printf("Out of memory"); // there is not enough memory in the heap
        return;
    }
    for (i = 0; i < pBoard->cols; i++)
    {
        pBoard->board[i] = (char*)malloc(sizeof(char) * pBoard->rows); //Dynamic allocation for rows
        if (!pBoard->board[i])// there is not enough memory in the heap
        {
            printf("Out of memory");
            return;
        }
        
        for (j = 0; j < pBoard->rows; j++)
            pBoard->board[i][j] = EMPTY_CHAR; //Boot the board using space
    }
}

void FreeBoard(Board* pBoard)
{
    int i;
    for (i = 0; i < pBoard->cols; i++)
        free(pBoard->board[i]); // free the dynamic allocation for rows
    
    free(pBoard->board); // free the dynamic allocation for cols
}

void PrintRecursive(int R, int counter) // Print with recursive function :  cols' number (Horizontally)
{
    if (counter == R) // stop condition
        return;
    
    printf("%d ", counter);
    
    return PrintRecursive(R , counter + 1); // return PrintRecursive with Rows and counter + 1
}

void PrintBoard(Board board)
{
    int i, j, counter = 0;
    
    printf("   ");
    PrintRecursive(board.rows, counter);
    printf("\n");
    
    for (i = board.cols - 1; i >= 0; i--)
    {
        printf("%d |", i); // print rows' number (vertically)
        
        for (j = 0; j < board.rows; j++)
            printf("%c|", board.board[i][j]);
        
        printf("\n");
    }
}

bool HasAnotherTurn(Board board, int iterations) // if the number of row times the number of column is bigger than the number of interaction that there has been between the two players it means that the board is still not full is that there and there is a possibility of continuing to play and move on to the next player
{
    return board.rows * board.cols > iterations;
}

void PlayFourInARow(Board board)
{
    int iterations = 0; // number of turns played by players in total
    bool isPlayerOne = false; // indicates player's turn
    bool isWon = false; // player's situation at the time of his turn: winner or loser
    
    do {
        isPlayerOne = !isPlayerOne; // change player turn
        PrintBoard(board); // print the game's situation
        
        isWon = PlayTurn(board, isPlayerOne);
        ++iterations;
    } while (!isWon && HasAnotherTurn(board, iterations)); // There is a loop until there is a winner or no player has won the game (full board)
    
    PrintBoard(board);
    
    if (isWon == true) // if "isWon" 1 the player won
        printf("Player #%d won!\n", (isPlayerOne) ? 1 : 0);
    else
        printf("Game over, no winner. The board is full\n");
    
}

bool PlayTurn(Board board, bool isPlayerOne)
{
    int ColToPlay;// the player's choice
    
    
    printf("Player #%d turn\n", (isPlayerOne) ? 1 : 2);// if "isPlayerOne" true is player1's turn if false player2's  turn
    do {
        printf("Choose a col: ");
        scanf("%d", &ColToPlay); // inputs choice's player
    } while (!IsValidRow(board, ColToPlay));//the loop continues if the choice of the player does not have in the bound or the column is already full
    
    //the choice's player valid
    return PlayTurnInRow(board, ColToPlay, isPlayerOne);
}

bool IsValidRow(Board board, int row)
{
    bool isValid = true; //boot 'isValid' to true
    
    if (row < 0 || row >= board.rows)// if row out of bound
        isValid = false;
    
    else if (board.board[board.cols - 1][row] != EMPTY_CHAR)// if row is already full
        isValid = false;
    
    if (!isValid) // if  'isValid' is false
        printf("Invalid col, choose a different col\n");
    
    return isValid;
}

bool PlayTurnInRow(Board board, int row, bool isPlayerOne)
{
    int avaliableColInRow = 0; // the variable gives the index in the colomn which available
    
    while (board.board[avaliableColInRow][row] != EMPTY_CHAR)// the loop continues until the place is available in the colomn
        avaliableColInRow++;
    
    board.board[avaliableColInRow][row] = isPlayerOne ? PLAYER_1_CHAR : PLAYER_2_CHAR; // if its player1's turn  , puts player1's sign in the index "avaliableColInRow" and if is  player2's turn the opposite
    
    return IsAWinnerCell(board, avaliableColInRow, row, isPlayerOne);
}
// check if the last player who finished his turn to win or not
bool IsAWinnerCell(Board board, int col, int row, bool isPlayerOne)
{
    char playerChar = isPlayerOne ? PLAYER_1_CHAR : PLAYER_2_CHAR; // this variable receives the sign of the player who has his turn
    
    return IsWinnerVertically(board, col, row, playerChar) || // if return True its means the player won
    IsWinnerHorizontally(board, col, row, playerChar) ||
    IsWinnerDiagonallyRight(board, col, row, playerChar) ||
    IsWinnerDiagonallyLeft(board, col, row, playerChar);
}
// check if the player succeeds 4 vertically successively
bool IsWinnerVertically(Board board, int col, int row, char playerChar)
{
    int i;
    
    for (i = 0; i < WIN_LENGTH; i++)
    {
        if (col - i < 0)
            return false;
        
        if (board.board[col - i][row] != playerChar)
            return false;
    }
    
    return true;
}
// check if the player succeeds 4 horizontally successively
bool IsWinnerHorizontally(Board board, int col, int row, char playerChar)
{
    int count = 0;
    int i;
    
    // check left
    for (i = 0; i < WIN_LENGTH; i++)
    {
        if (row - i < 0)// if we're out of bound, stop counting
            break;
        
        if (board.board[col][row - i] != playerChar) // if we find the opponent char, stop counting
            break;
        
        count++;
    }
    
    // check right
    for (i = 0; i < WIN_LENGTH; i++)
    {
        if (row + i + 1 >= board.rows)// if we're out of bound, stop counting
            break;
        
        if (board.board[col][row + i + 1] != playerChar) // if we find the opponent char, we stop counting
            break;
        
        count++;
    }
    
    return count >= WIN_LENGTH; //if there are 4 consecutive times the player's sing
}
// checks if the last player who finished his turn succeeds 4 Diagonally Right successively
bool IsWinnerDiagonallyRight(Board board, int col, int row, char playerChar)
{
    int count = 0; // count the times that the sign player apeare
    int i;
    
    // check up
    for (i = 0; i < WIN_LENGTH; i++)
    {
        if (col - i < 0 || row - i < 0)// if we're out of bound, stop counting
            break;
        
        if (board.board[col - i][row - i] != playerChar)// if we find the opponent char, stop counting
            break;
        
        count++;
    }
    
    // check down
    for (i = 0; i < WIN_LENGTH; i++)
    {
        if (col + i + 1 >= board.cols || row + i + 1 >= board.rows) // if we're out of bound, stop counting
            break;
        
        if (board.board[col + i + 1][row + i + 1] != playerChar) // if we find the opponent char, we stop counting
            break;
        
        count++;
    }
    
    return count >= WIN_LENGTH; //if there are 4 consecutive times the player's sing
}
//checks if the last player who finished his turn succeeds 4 Diagonally Left successively
bool IsWinnerDiagonallyLeft(Board board, int col, int row, char playerChar)
{
    int count = 0;
    int i;
    
    // check up
    for (i = 0; i < WIN_LENGTH; i++)
    {
        if (col + i >= board.cols || row - i < 0) // if we're out of bound, stop counting
            break;
        
        if (board.board[col + i][row - i] != playerChar) // if we find the opponent char, stop counting
            break;
        
        count++;
    }
    
    // check down
    for (i = 0; i < WIN_LENGTH; i++)
    {
        if (col - i - 1 < 0 || row + i + 1 >= board.rows) // if we're out of bound, stop counting
            break;
        
        if (board.board[col - i - 1][row + i + 1] != playerChar) // if we find the opponent char, we stop counting
            break;
        
        count++;
    }
    
    return count >= WIN_LENGTH; //if there are 4 consecutive times the player's sing
    
}
